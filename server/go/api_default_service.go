/*
 * user-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)

// DefaultApiService is a service that implents the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
	users map[int32]User
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{
		users: make(map[int32]User),
	}
}

type UserGetResponse struct {
	Count    int32
	UserList UserList
}

// UserGet -
func (s *DefaultApiService) UserGet(ctx context.Context) (ImplResponse, error) {

	res := UserList{
		Count: int32(len(s.users)),
	}
	for _, u := range s.users {
		res.Users = append(res.Users, u)
	}

	return Response(http.StatusOK, res), nil
}

// UserIdGet -
func (s *DefaultApiService) UserIdGet(ctx context.Context, id int32) (ImplResponse, error) {

	user, ok := s.users[id]
	if !ok {
		return Response(http.StatusNotFound, nil), nil
	}

	return Response(http.StatusOK, user), nil
}

// UserPost -
func (s *DefaultApiService) UserPost(ctx context.Context, user User) (ImplResponse, error) {
	len := int32(len(s.users))
	user.Id = len + 1
	s.users[user.Id] = user

	return Response(http.StatusCreated, nil), nil
}
