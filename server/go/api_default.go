/*
 * user-service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer) Router {
	return &DefaultApiController{service: s}
}

// Routes returns all of the api route for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{
		{
			"UsersGet",
			strings.ToUpper("Get"),
			"/users",
			c.UsersGet,
		},
		{
			"UsersIdGet",
			strings.ToUpper("Get"),
			"/users/{id}",
			c.UsersIdGet,
		},
		{
			"UsersPost",
			strings.ToUpper("Post"),
			"/users",
			c.UsersPost,
		},
	}
}

// UsersGet -
func (c *DefaultApiController) UsersGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UsersGet(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersIdGet -
func (c *DefaultApiController) UsersIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id, err := parseInt32Parameter(params["id"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.UsersIdGet(r.Context(), id)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UsersPost -
func (c *DefaultApiController) UsersPost(w http.ResponseWriter, r *http.Request) {
	user := &User{}
	if err := json.NewDecoder(r.Body).Decode(&user); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.UsersPost(r.Context(), *user)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
